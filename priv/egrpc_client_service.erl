{{#use_doc_attribute}}-moduledoc """
This module is auto-generated by rebar3_egrpc_plugin.

This module was generated on {{datetime}} and should not be modified manually.
"""
{{/use_doc_attribute}}{{^use_doc_attribute}}%%
%% @doc This module is auto-generated by rebar3_egrpc_plugin.
%%
%% This module was generated on {{datetime}} and should not be modified manually
%% @end
{{/use_doc_attribute}}

-module({{module_name}}).

{{#methods}}
-export([{{method}}/{{^input_stream}}2{{/input_stream}}{{#input_stream}}1{{/input_stream}}, {{method}}/{{^input_stream}}3{{/input_stream}}{{#input_stream}}2{{/input_stream}}]).
{{/methods}}

-define(GRPC_SERVICE_NAME, '{{fq_service_name}}').
{{#methods}}

{{#use_doc_attribute}}
-doc "Call the {{grpc_method_type}} RPC method `{{fq_method_name}}' of service `{{fq_service_name}}'."
{{/use_doc_attribute}}{{^use_doc_attribute}}%% @doc Call the {{grpc_method_type}} RPC method `{{fq_method_name}}' of service `{{fq_service_name}}'.
{{/use_doc_attribute}}
-spec {{method}}(egrpc:channel(){{^input_stream}}, Request{{/input_stream}}) -> Result when{{^input_stream}}
    Request :: {{pb_module}}:'{{input}}'(),{{/input_stream}}{{^output_stream}}
    Response :: {{pb_module}}:'{{output}}'(),{{/output_stream}}
    Result :: egrpc_stub:{{^input_stream}}{{^output_stream}}unary_ret(Response){{/output_stream}}{{#output_stream}}server_streaming_ret(){{/output_stream}}{{/input_stream}}{{#input_stream}}{{^output_stream}}client_streaming_ret(){{/output_stream}}{{#output_stream}}bidi_streaming_ret(){{/output_stream}}{{/input_stream}}.
{{method}}(Channel{{^input_stream}}, Request{{/input_stream}}) ->
    {{method}}(Channel{{^input_stream}}, Request{{/input_stream}}, #{}).

-spec {{method}}(egrpc:channel(){{^input_stream}}, Request{{/input_stream}}, Opts) -> Result when
    Result :: egrpc_stub:{{^input_stream}}{{^output_stream}}unary_ret(Response){{/output_stream}}{{#output_stream}}server_streaming_ret(){{/output_stream}}{{/input_stream}}{{#input_stream}}{{^output_stream}}client_streaming_ret({){{/output_stream}}{{#output_stream}}bidi_streaming_ret(){{/output_stream}}{{/input_stream}},{{^input_stream}}
    Request :: {{pb_module}}:'{{input}}'(),{{/input_stream}}{{^output_stream}}
    Response :: {{pb_module}}:'{{output}}'(),{{/output_stream}}
    Opts :: egrpc_stub:opts().
{{method}}(Channel{{^input_stream}}, Request{{/input_stream}}, Opts) ->
    RpcDef = {{pb_module}}:find_rpc_def(?GRPC_SERVICE_NAME, '{{fq_method_name}}'),
    Grpc = #{
        rpc_def => RpcDef,
        path => <<"/{{fq_service_name}}/{{fq_method_name}}">>,
        pb_module => {{pb_module}},
        service_name => ?GRPC_SERVICE_NAME
    },
    egrpc_stub:{{^input_stream}}{{^output_stream}}unary{{/output_stream}}{{#output_stream}}server_streaming{{/output_stream}}{{/input_stream}}{{#input_stream}}{{^output_stream}}client_streaming{{/output_stream}}{{#output_stream}}bidi_streaming{{/output_stream}}{{/input_stream}}(Channel{{^input_stream}}, Request{{/input_stream}}, Grpc, Opts).
{{/methods}}
